// Code generated by mockery v1.0.0. DO NOT EDIT.

package gui

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// mockFileChecker is an autogenerated mock type for the fileChecker type
type mockFileChecker struct {
	mock.Mock
}

// checkWorkflowExists provides a mock function with given fields: f
func (_m *mockFileChecker) checkWorkflowExists(f fileChecker) (bool, error) {
	ret := _m.Called(f)

	var r0 bool
	if rf, ok := ret.Get(0).(func(fileChecker) bool); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(fileChecker) error); ok {
		r1 = rf(f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// isNotExist provides a mock function with given fields: err
func (_m *mockFileChecker) isNotExist(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// stat provides a mock function with given fields: name
func (_m *mockFileChecker) stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	var r0 fs.FileInfo
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
