// Code generated by mockery v1.0.0. DO NOT EDIT.

package recipe

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockFileReader is an autogenerated mock type for the FileReader type
type MockFileReader struct {
	mock.Mock
}

// getPopularity provides a mock function with given fields: recipeName
func (_m *MockFileReader) getPopularity(recipeName string) (int, error) {
	ret := _m.Called(recipeName)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(recipeName)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(recipeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementPopularity provides a mock function with given fields: recipeName
func (_m *MockFileReader) IncrementPopularity(recipeName string) error {
	ret := _m.Called(recipeName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(recipeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// loadPopularityFile provides a mock function with given fields:
func (_m *MockFileReader) loadPopularityFile() (PopularityFile, error) {
	ret := _m.Called()

	var r0 PopularityFile
	if rf, ok := ret.Get(0).(func() PopularityFile); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PopularityFile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// loadRecipeFile provides a mock function with given fields: fileName
func (_m *MockFileReader) loadRecipeFile(fileName fs.FileInfo) (Recipe, error) {
	ret := _m.Called(fileName)

	var r0 Recipe
	if rf, ok := ret.Get(0).(func(fs.FileInfo) Recipe); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(Recipe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(fs.FileInfo) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// marshallJSON provides a mock function with given fields: pop
func (_m *MockFileReader) marshallJSON(pop PopularityFile) ([]byte, error) {
	ret := _m.Called(pop)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(PopularityFile) []byte); ok {
		r0 = rf(pop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(PopularityFile) error); ok {
		r1 = rf(pop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// readFile provides a mock function with given fields: filePath
func (_m *MockFileReader) readFile(filePath string) ([]byte, error) {
	ret := _m.Called(filePath)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// readRecipeDirectory provides a mock function with given fields:
func (_m *MockFileReader) readRecipeDirectory() ([]fs.FileInfo, error) {
	ret := _m.Called()

	var r0 []fs.FileInfo
	if rf, ok := ret.Get(0).(func() []fs.FileInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// unmarshallJSONToPopularity provides a mock function with given fields: file
func (_m *MockFileReader) unmarshallJSONToPopularity(file []byte) (PopularityFile, error) {
	ret := _m.Called(file)

	var r0 PopularityFile
	if rf, ok := ret.Get(0).(func([]byte) PopularityFile); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(PopularityFile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// unmarshallJSONToRecipe provides a mock function with given fields: file
func (_m *MockFileReader) unmarshallJSONToRecipe(file []byte) (Recipe, error) {
	ret := _m.Called(file)

	var r0 Recipe
	if rf, ok := ret.Get(0).(func([]byte) Recipe); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(Recipe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// writeFile provides a mock function with given fields: newFile
func (_m *MockFileReader) writeFile(newFile []byte) error {
	ret := _m.Called(newFile)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(newFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// writePopularityFile provides a mock function with given fields: pop
func (_m *MockFileReader) writePopularityFile(pop PopularityFile) error {
	ret := _m.Called(pop)

	var r0 error
	if rf, ok := ret.Get(0).(func(PopularityFile) error); ok {
		r0 = rf(pop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
