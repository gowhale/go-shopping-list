// Code generated by mockery v1.0.0. DO NOT EDIT.

package workflow

import (
	mock "github.com/stretchr/testify/mock"
	excelize "github.com/xuri/excelize/v2"
)

// mockExcel is an autogenerated mock type for the excel type
type mockExcel struct {
	mock.Mock
}

// NewFile provides a mock function with given fields:
func (_m *mockExcel) NewFile() *excelize.File {
	ret := _m.Called()

	var r0 *excelize.File
	if rf, ok := ret.Get(0).(func() *excelize.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*excelize.File)
		}
	}

	return r0
}

// SaveAs provides a mock function with given fields: f, name, opt
func (_m *mockExcel) SaveAs(f *excelize.File, name string, opt ...excelize.Options) error {
	_va := make([]interface{}, len(opt))
	for _i := range opt {
		_va[_i] = opt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, f, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*excelize.File, string, ...excelize.Options) error); ok {
		r0 = rf(f, name, opt...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCellValue provides a mock function with given fields: f, sheet, axis, value
func (_m *mockExcel) SetCellValue(f *excelize.File, sheet string, axis string, value interface{}) error {
	ret := _m.Called(f, sheet, axis, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*excelize.File, string, string, interface{}) error); ok {
		r0 = rf(f, sheet, axis, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
