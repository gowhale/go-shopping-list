// Code generated by mockery v1.0.0. DO NOT EDIT.

package common

import (
	recipe "go-shopping-list/pkg/recipe"

	mock "github.com/stretchr/testify/mock"
)

// MockWorkflowInterface is an autogenerated mock type for the WorkflowInterface type
type MockWorkflowInterface struct {
	mock.Mock
}

// AddIngredientsToReminders provides a mock function with given fields: ings, s, w
func (_m *MockWorkflowInterface) AddIngredientsToReminders(ings []recipe.Ingredient, s ScreenInterface, w WorkflowInterface) error {
	ret := _m.Called(ings, s, w)

	var r0 error
	if rf, ok := ret.Get(0).(func([]recipe.Ingredient, ScreenInterface, WorkflowInterface) error); ok {
		r0 = rf(ings, s, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunReminder provides a mock function with given fields: s, currentIng
func (_m *MockWorkflowInterface) RunReminder(s ScreenInterface, currentIng recipe.Ingredient) error {
	ret := _m.Called(s, currentIng)

	var r0 error
	if rf, ok := ret.Get(0).(func(ScreenInterface, recipe.Ingredient) error); ok {
		r0 = rf(s, currentIng)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitShoppingList provides a mock function with given fields: s, wf, fr, recipes, recipeMap
func (_m *MockWorkflowInterface) SubmitShoppingList(s ScreenInterface, wf WorkflowInterface, fr recipe.FileReader, recipes []string, recipeMap map[string]recipe.Recipe) error {
	ret := _m.Called(s, wf, fr, recipes, recipeMap)

	var r0 error
	if rf, ok := ret.Get(0).(func(ScreenInterface, WorkflowInterface, recipe.FileReader, []string, map[string]recipe.Recipe) error); ok {
		r0 = rf(s, wf, fr, recipes, recipeMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
